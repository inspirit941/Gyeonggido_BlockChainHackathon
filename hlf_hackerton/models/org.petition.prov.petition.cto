
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.petition.prov.petition

import org.petition.prov.participants.* // 참여자 전체 속성을 그대로 받아옴.

asset Petition identified by PetitionId{
  
  o String PetitionId
  --> Civil Civil // 민원 제기한 사람 정보를 입력하는 창.
  //o String title // 필요하다면 민원 제목은 여기에 넣는 걸 생각함. v0.1
  o String BusNumber // 버스번호. 100-1 같은 숫자가 있어 string으로 처리해야 함
  o DateTime Time // 발생 일월시. 숫자로 할지 string으로 할지... 뭐가 데이터 처리에 편하지?
  o String location // 발생 장소. 무슨 정류장이라던지, 어느 사거리라던지. --- 시 군
  o String Content // 구체적인 내용.

  
  o String VehicleId optional // 자동차 고유넘버. 11나 0000 같은. 배차간격에는 의무사항이 아니다.
  o String BusStopName optional // 버스정류장 이름. (알아서 적어넣는 거)
  o String BusCompany optional // 회사명을 알고 있다면 적을 수 있도록
  o String DriverName optional // 버스기사 이름을 알고 있다면 적을 수 있도록.
  o Boolean isCash optional  // 요금 민원에서 현금인지 카드인지
  o Boolean Accepted default = false
  o Boolean Resolved default = false // 관할 공무원이 민원 해결했을 경우 TRUE로 바꾸는 영역.
  o Integer Rating optional // 1,2,3,4,5 scale 5개.
  o DateTime timestamp
}

asset FeedBack identified by FeedBackId{
  --> GovernEmployee GovernEmployee
  o String FeedBackId
  --> Petition Petition
  o String Comments // 접수처리완료 등의 사항 전달.
  o String BusComments optional
  o DateTime timestamp
}
transaction NonstopCreate {
  --> Civil Civil
  o String location // 발생 위치. 무슨 정류장이라던지, 어느 사거리라던지.
  o String BusStopName // 버스정류장 이름. (알아서 적어넣는 거)
  o String BusNumber // 버스번호. 100-1 같은 숫자가 있어 string으로 처리해야 함
  o String VehicleId
  o DateTime Time // 사건 발생 시간.
  o String Content // 구체적인 내용.
  
}

transaction ImpoliteCreate{
  --> Civil Civil
  o String location // 발생 위치. 무슨 정류장이라던지, 어느 사거리라던지.
  o String DriverName optional // 버스기사 이름을 알고 있다면 적을 수 있도록.
  o String BusNumber // 버스번호. 100-1 같은 숫자가 있어 string으로 처리해야 함
  o String VehicleId // 차량번호
  o DateTime Time // 사건 발생 시간.
  o String Content // 구체적인 내용.
}
transaction IntervalCreate{
  --> Civil Civil
  o String location // 발생 위치. 무슨 정류장이라던지, 어느 사거리라던지.
  o String BusNumber // 버스번호. 100-1 같은 숫자가 있어 string으로 처리해야 함
  o DateTime Time // 사건 발생 시간.
  o String Content // 구체적인 내용.
}
transaction FeeCreate{
  --> Civil Civil
  o Boolean isCash
  o String location // 발생 위치. 무슨 정류장이라던지, 어느 사거리라던지.
  o String DriverName optional // 버스기사 이름을 알고 있다면 적을 수 있도록.
  o String BusNumber // 버스번호. 100-1 같은 숫자가 있어 string으로 처리해야 함
  o String VehicleId // 차량번호
  o DateTime Time // 사건 발생 시간.
  o String Content // 구체적인 내용.
}

// 관할 공무원의 접수 완료
transaction AcceptPetition{
  --> GovernEmployee GovernEmployee
  --> Petition Petition
  o String Comments // 접수처리완료 등의 사항 전달.
}

// 민원이 해결되었다는 걸 알리는 transaction.
transaction ResolvePetition {
  --> Petition Petition
  --> BusCompany BusCompany
}


// participant Department identified by DepartmentId {
//   o String DepartmentId
//   o String DepartmentName
//   // o String lastName
// }

// participant Civil identified by CivilId{
//   o String CivilId
//   o String[] Petitionlist // 그 시민이 제기한 민원의 id를 넣는 list v0.1. 근데 구조상 어떻게 필요해지는 건지 아직 감이 안옴
//   o CivilDetail CivilDetail // 민원 제기한 시민의 정보를 넣는 란. optional로 선언해야 하는지 고민중 v0.1
// }

// concept CivilDetail {
//   o String Name
//   // o String LName
//   o String email
// }

// participant BusAssociation identified by BusAssociationId{
//   o String BusAssociationId

// }


// Sample에서 만들었던 파일들.

// participant SampleParticipant identified by participantId {
//   o String participantId
//   o String firstName
//   o String lastName
// }

// asset SampleAsset identified by assetId {
//   o String assetId
//   --> SampleParticipant owner
//   o String value
// }


// event SampleEvent {
//   --> SampleAsset asset
//   o String oldValue
//   o String newValue
// }


// 버스가 왜 불친절해지나 -> 근로환경 개선 가능. 버스기사의 근무시간도 확실히 정할 수 있다. (스케줄 데이터)
// 스케줄 데이터를 블록체인에 담아야 하나? 검색도 느린데. 조작의 여지가 없다면 굳이 담을 필요까지는 없다.
// 모듈화 + 확장성 측면에서 발전시킨다면 이렇게도 생각해볼 수 있겠다!